select A.R , A.D,B.d,C.d from ( select month (record_date) as R, max(data_value) as d from temperature_records where data_type="max" group by month (record_date))
 A inner join (select month(record_date) as R , min(data_value) as d from temperature_records where data_type="min" group by month (record_date)) B on A.r=B.r 
inner join (select month (record_date) as R , round(avg(data_value),0) as d from temperature_records where data_type="avg" group by month (record_date)) C
 on a.r=C.r;




select Q1.algorithm, q1.v,q2.v,q3.v,q4.v from (select c.algorithm ,sum(volume) as V from coins c inner join  transactions t on t.coin_code=c.code 
where year(dt)=2020 and quarter(dt)=1 group by c.algorithm) Q1 inner join ( select  c.algorithm, sum(volume) as v  from coins c inner join transactions t 
on t.coin_code=c.code where year(dt)=2020 and quarter(dt)=2 group by c.algorithm) Q2 on q1 .algorithm=q2.algorithm  inner join ( select  c.algorithm, sum(volume) as v
  from coins c inner join transactions t on t.coin_code=c.code where year(dt)=2020 and quarter(dt)=3 group by c.algorithm) Q2 on q1 .algorithm=q3.algorithm 
inner join ( select  c.algorithm, sum(volume) as v  from coins c inner join transactions t on t.coin_code=c.code where year(dt)=2020 and quarter(dt)=4 
group by c.algorithm) Q4 on q1.algorithm=q4.algorithm order by q1.algorithm ;




Weekend Hours Solution.txt



WITH hours_worked as (
  
SELECT
      emp_id,
  	   CASE 
       WHEN datepart(minute,TIMESTAMP) >= datepart(minute,lag(TIMESTAMP) OVER(PARTITION BY CAST(TIMESTAMP AS date),emp_id ORDER BY TIMESTAMP)) 
            then datepart(hour,timestamp) - datepart(hour,lag(TIMESTAMP) OVER(PARTITION BY CAST(TIMESTAMP AS date),emp_id ORDER BY TIMESTAMP)) 
  	   ELSE datepart(hour,timestamp) - datepart(hour,lag(TIMESTAMP) OVER(PARTITION BY CAST(TIMESTAMP AS date),emp_id ORDER BY TIMESTAMP)) - 1
       END AS hours_worked
FROM   attendance
-- only weekends
WHERE  datepart(weekday,TIMESTAMP) IN(7,1)
)
SELECT
   emp_id,
      SUM(hours_worked) as hours_worked
FROM  hours_worked
GROUP BY emp_id
ORDER BY hours_worked desc




Crypto Market Algorithms Report Solution



WITH quarterly_volume as (

SELECT 
        algorithm,
        SUM(volume) as volume,
        datepart(quarter,dt) as quarters
        
FROM    coins c
JOIN    transactions t ON t.coin_code = c.code
WHERE   datepart(year,dt) = 2020
GROUP BY algorithm, datepart(quarter,dt)

)
SELECT
       c.algorithm,
       qv1.volume as transactions_Q1,
       qv2.volume as transactions_Q2,
       qv3.volume as transactions_Q3,
       qv4.volume as transactions_Q4
FROM   coins c 
LEFT JOIN quarterly_volume qv1 
on c.algorithm = qv1.algorithm
AND qv1.quarters = 1  
LEFT JOIN quarterly_volume qv2 
on c.algorithm = qv2.algorithm
AND qv2.quarters = 2  
LEFT JOIN quarterly_volume qv3 
on c.algorithm = qv3.algorithm
AND qv3.quarters = 3
LEFT JOIN quarterly_volume qv4 
on c.algorithm = qv4.algorithm
AND qv4.quarters = 4
WHERE c.code NOT LIKE 'DOGE'
ORDER BY algorithm



Crypto Market Transaction Monitoring Solution

with difference as (

SELECT
		*,
        DATEDIFF(minute,lag(dt) OVER (ORDER BY sender,dt),dt) as difF_minute,
  		ROW_NUMBER() OVER(ORDER BY sender,dt) as rownumber
FROM    krypto
--ORDER BY sender,dt
  
)
,rn as (
SELECT
		rownumber
FROM    difference
WHERE   rownumber IN(
  SELECT
  		 rownumber
  FROM   krypto
  WHERE  abs(diff_minute) < 60
)
--order by sender,dt
)

,sequences as ( 
SELECT 
		*
FROM    difference
WHERE rownumber IN(
SELECT 
		rownumber 
FROM    rn
UNION
SELECT rownumber - 1 as rownumber
FROM   rn
 )
--order by sender,dt
)
SELECT 
       sender,
       MIN(dt) as Sequence_start,
       MAX(dt) as Sequence_end,
       COUNT(rownumber) as transactions_count,
       SUM(amount) as transactions_sum
FROM   sequences
GROUP BY sender
HAVING SUM(amount) >= 150
order by sender,MIN(dt),MAX(dt)


Weather Analysis Solution


With max AS (

SELECT
	  datepart(month,record_date) AS month_max,
	  MAX(data_value) AS max_value
FROM   temperature_records
GROUP BY datepart(month,record_date)
-- ORDER BY datepart(month,record_date)
),
min AS(
        SELECT
			datepart(month,record_date) AS month_min,
			MIN(data_value) AS min_value
FROM    temperature_records
GROUP BY datepart(month,record_date)
-- ORDER BY datepart(month,record_date)
),
  AVG AS(
	  SELECT
			datepart(month,record_date) AS month_avg,
			ROUND(AVG(CAST(data_value AS FLOAT)),0) as avg_value
FROM   temperature_records
WHERE  data_type LIKE 'avg'
GROUP BY datepart(month,record_date), data_type
-- ORDER BY datepart(month,record_date)
)

SELECT
	  month_max,
	  max_value,
	  min_value,
       avg_value
FROM   max
JOIN   min ON min.month_min = max.month_max
JOIN   avg ON avg.month_avg = max.month_max


-- second shorter Solution from Ivan Jonathan:

SELECT
    datepart(month,record_date) AS month,
    MAX(case when data_type = 'max' then data_value else null end) AS max_value,
    MIN(case when data_type = 'min' then data_value else null end) AS min_value,
    ROUND(AVG(case when data_type = 'avg' then CAST(data_value as FLOAt) else null end),0) as avg_value
from temperature_records
group by datepart(month,record_date);



Weekend Hours Solution.txt


